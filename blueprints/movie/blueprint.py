"""
blueprint for movie table
"""

from datetime import date, datetime
import os
from typing import Optional
from flask import Blueprint, request
from pydantic import BaseModel
from flask_pydantic import validate

from blueprints.movie.service import (
    svc_delete,
    svc_exact_search,
    svc_get,
    svc_get_by_id,
    svc_in_search,
    svc_like_search,
    svc_post,
    svc_put,
)


class MovieItem(BaseModel):
    """Movie item model"""

    title: str
    description: str
    movie_year: str
    rating: float
    runtime: float
    votes: int
    revenue: float
    metascore: int
    created_at: Optional[str]


class MovieDataModel(BaseModel):
    """Movie data model"""

    movie_id: int
    title: str
    description: str
    movie_year: date
    rating: float
    runtime: float
    votes: int
    revenue: float
    metascore: int
    created_at: Optional[str | datetime | date]


class MessageModel(BaseModel):
    """Message model"""

    message: str


class ResponseModel(BaseModel):
    """Movie response model"""

    status: int
    data: list[MovieDataModel | MessageModel]


class FieldValueModel(BaseModel):
    """Movie Field and Value mmodel"""

    field: str
    value: str | int | date | float


class SearchModel(BaseModel):
    """Movie search model"""

    fields: list[FieldValueModel]


class ValueModel(BaseModel):
    """Value model"""

    value: str | float | int | date


class InModel(BaseModel):
    """In Search model"""

    field: str
    values: list[ValueModel]


class PostModel(BaseModel):
    """Movie Post model status"""

    status: int | str


version = os.getenv("VERSION")
movie_blueprint = Blueprint("movie", __name__, url_prefix=version)


@movie_blueprint.route("/movie/movies", methods=["GET"])
@validate()
def get_all_records():
    """
    A GET handler. Returns all records for customer.
    ---
    tags:
      - Movie
    summary: Get all movie records
    description: A GET handler that returns all movie records.
    responses:
      200:
        description: A list of movies
        schema:
          type: array
          items:
            type: object
            properties:
              movie_id:
                type: integer
                description: ID of the movie
              title:
                type: string
                description: Title of the movie
              description:
                type: string
                description: Description of the movie
              movie_year:
                type: string
                format: date
                description: Year the movie was released
              rating:
                type: number
                format: float
                description: Movie rating
              runtime:
                type: number
                format: float
                description: Runtime of the movie in minutes
              votes:
                type: integer
                description: Number of votes the movie received
              revenue:
                type: number
                format: float
                description: Revenue generated by the movie
              metascore:
                type: integer
                description: Metascore of the movie
              created_at:
                type: string
                format: date-time
                description: Timestamp when the movie record was created
      500:
        description: Internal server error
    """
    result = svc_get()

    return ResponseModel(status=result["status"], data=result["data"])


@movie_blueprint.route("/movie/<movie_id>", methods=["GET"])
@validate()
def get_by_id(movie_id: int):
    """
    A GET handler. Returns record by a given identifier.
    ---
    tags:
      - Movie
    summary: Get movie by ID
    description: A GET handler that returns a movie record by a given identifier.
    parameters:
      - in: path
        name: movie_id
        type: integer
        required: true
        description: ID of the movie to retrieve
    responses:
      200:
        description: Movie record
        schema:
          type: object
          properties:
            movie_id:
              type: integer
              description: ID of the movie
            title:
              type: string
              description: Title of the movie
            description:
              type: string
              description: Description of the movie
            movie_year:
              type: string
              format: date
              description: Year the movie was released
            rating:
              type: number
              format: float
              description: Movie rating
            runtime:
              type: number
              format: float
              description: Runtime of the movie in minutes
            votes:
              type: integer
              description: Number of votes the movie received
            revenue:
              type: number
              format: float
              description: Revenue generated by the movie
            metascore:
              type: integer
              description: Metascore of the movie
            created_at:
              type: string
              format: date-time
              description: Timestamp when the movie record was created
      400:
        description: Invalid input
      404:
        description: Movie not found
      500:
        description: Internal server error
    """
    result = svc_get_by_id(movie_id)

    return ResponseModel(status=result["status"], data=result["data"])


@movie_blueprint.route("/movie/create", methods=["POST"])
@validate(body=MovieItem)
def post_movie():
    """
    A POST handler. Creates a new movie record
    ---
    tags:
      - Movie
    summary: Create a new movie
    description: A POST handler that creates a new movie record.
    parameters:
      - in: body
        name: body
        description: Movie object with details for the new movie
        schema:
          type: object
          required:
            - title
            - description
            - movie_year
            - rating
            - runtime
            - votes
            - revenue
            - metascore
            - created_at
          properties:
            title:
              type: string
              description: Title of the movie
            description:
              type: string
              description: Description of the movie
            movie_year:
              type: string
              format: date
              description: Year the movie was released
            rating:
              type: number
              format: float
              description: Movie rating
            runtime:
              type: number
              format: float
              description: Runtime of the movie in minutes
            votes:
              type: integer
              description: Number of votes the movie received
            revenue:
              type: number
              format: float
              description: Revenue generated by the movie
            metascore:
              type: integer
              description: Metascore of the movie
            created_at:
              type: string
              description: movie data created timestamp
    responses:
      201:
        description: Movie created successfully
      400:
        description: Invalid input
      500:
        description: Internal server error
    """
    # request object
    payload = request.get_json()

    result = svc_post(payload)

    if result["status"] == 200:
        status = 201
    else:
        status = result["status"]

    return PostModel(status=status)


@movie_blueprint.route("/movie/<movie_id>", methods=["PUT"])
@validate(body=MovieItem)
def put_movie(movie_id: int):
    """
    A PUT handler. Updates a record by id
    ---
    tags:
      - Movie
    summary: Update a movie by ID
    description: A PUT handler that updates a movie record by ID.
    parameters:
      - in: path
        name: movie_id
        type: integer
        required: true
        description: ID of the movie to update
      - in: body
        name: body
        description: Movie object with updated details
        schema:
          type: object
          required:
            - title
            - description
            - movie_year
            - rating
            - runtime
            - votes
            - revenue
            - metascore
          properties:
            title:
              type: string
              description: Title of the movie
            description:
              type: string
              description: Description of the movie
            movie_year:
              type: string
              format: date
              description: Year the movie was released
            rating:
              type: number
              format: float
              description: Movie rating
            runtime:
              type: number
              format: float
              description: Runtime of the movie in minutes
            votes:
              type: integer
              description: Number of votes the movie received
            revenue:
              type: number
              format: float
              description: Revenue generated by the movie
            metascore:
              type: integer
              description: Metascore of the movie
    responses:
      200:
        description: Movie updated successfully
      400:
        description: Invalid input
      404:
        description: Movie not found
      500:
        description: Internal server error
    """

    # request object
    payload = request.get_json()
    result = svc_put(payload, movie_id)

    return ResponseModel(status=result["status"], data=result["data"])


@movie_blueprint.route("/movie/<movie_id>", methods=["DELETE"])
@validate()
def delete_movie(movie_id: int):
    """
    A DELETE handler. Deletes a record by id
    ---
    tags:
      - Movie
    summary: Delete a movie by ID
    description: A DELETE handler that deletes a movie record by ID.
    parameters:
      - in: path
        name: movie_id
        type: integer
        required: true
        description: ID of the movie to delete
    responses:
      200:
        description: Movie deleted successfully
      404:
        description: Movie not found
      500:
        description: Internal server error
    """

    result = svc_delete(movie_id)

    return ResponseModel(status=result["status"], data=result["data"])


@movie_blueprint.route("/movie/exact", methods=["POST"])
@validate(body=SearchModel)
def search_exact():
    """
    EXACT Search
    Retrives all records from movies for exact value match
    ---
    tags:
      - Movie
    summary: Exact search in movies
    description: A POST handler that retrieves movie records matching exact values.
    parameters:
      - in: body
        name: body
        description: Search criteria for exact match
        schema:
          type: object
          required:
            - fields
          properties:
            fields:
              type: array
              description: List of fields and their exact values
              items:
                type: object
                required:
                  - field
                  - value
                properties:
                  field:
                    type: string
                    description: The field to search on (e.g., title, last_name, etc.)
                  value:
                    type: string
                    description: The exact value to match
    responses:
      200:
        description: A list of movies matching the search criteria
        schema:
          type: array
          items:
            type: object
            properties:
              movie_id:
                type: integer
                description: ID of the movie
              title:
                type: string
                description: Title of the movie
              description:
                type: string
                description: Description of the movie
              movie_year:
                type: string
                format: date
                description: Year the movie was released
              rating:
                type: number
                format: float
                description: Movie rating
              runtime:
                type: number
                format: float
                description: Runtime of the movie in minutes
              votes:
                type: integer
                description: Number of votes the movie received
              revenue:
                type: number
                format: float
                description: Revenue generated by the movie
              metascore:
                type: integer
                description: Metascore of the movie
              created_at:
                type: string
                format: date-time
                description: Timestamp when the movie record was created
      400:
        description: Invalid input
      404:
        description: No records found
      500:
        description: Internal server error
    """

    # request object
    payload = request.get_json()

    result = svc_exact_search(payload)
    return ResponseModel(status=result["status"], data=result["data"])


@movie_blueprint.route("/movie/like", methods=["POST"])
@validate(body=SearchModel)
def like_search():
    """
    LIKE SEARCH
    Retrives all records from movies for like value search

    ---
    tags:
      - Movie
    summary: Exact search in movies
    description: A POST handler that retrieves movie records matching exact values.
    parameters:
      - in: body
        name: body
        description: Search criteria for exact match
        schema:
          type: object
          required:
            - fields
          properties:
            fields:
              type: array
              description: List of fields and their exact values
              items:
                type: object
                required:
                  - field
                  - value
                properties:
                  field:
                    type: string
                    description: The field to search on (e.g., title, last_name, etc.)
                  value:
                    type: string
                    description: The exact value to match
    responses:
      200:
        description: A list of movies matching the search criteria
        schema:
          type: array
          items:
            type: object
            properties:
              movie_id:
                type: integer
                description: ID of the movie
              title:
                type: string
                description: Title of the movie
              description:
                type: string
                description: Description of the movie
              movie_year:
                type: string
                format: date
                description: Year the movie was released
              rating:
                type: number
                format: float
                description: Movie rating
              runtime:
                type: number
                format: float
                description: Runtime of the movie in minutes
              votes:
                type: integer
                description: Number of votes the movie received
              revenue:
                type: number
                format: float
                description: Revenue generated by the movie
              metascore:
                type: integer
                description: Metascore of the movie
              created_at:
                type: string
                format: date-time
                description: Timestamp when the movie record was created
      400:
        description: Invalid input
      404:
        description: No records found
      500:
        description: Internal server error
    """

    payload = request.get_json()

    result = svc_like_search(payload)
    return ResponseModel(status=result["status"], data=result["data"])


@movie_blueprint.route("/movie/in", methods=["POST"])
@validate(body=InModel)
def in_search():
    """
    IN SEARCH
    Retrives all records from movies for in value search
    ---
    tags:
      - Movie
    summary: In search in movies
    description: A POST handler that retrieves movie records based on 'IN' value search.
    parameters:
      - in: body
        name: body
        description: Search criteria for 'IN' search
        schema:
          type: object
          required:
            - field
            - values
          properties:
            field:
              type: string
              description: The field to search on (e.g., last_name, genre, etc.)
            values:
              type: array
              description: List of values to match
              items:
                type: object
                required:
                  - value
                properties:
                  value:
                    type: string
                    description: The value to match
    responses:
      200:
        description: A list of movies matching the search criteria
        schema:
          type: array
          items:
            type: object
            properties:
              movie_id:
                type: integer
                description: ID of the movie
              title:
                type: string
                description: Title of the movie
              description:
                type: string
                description: Description of the movie
              movie_year:
                type: string
                format: date
                description: Year the movie was released
              rating:
                type: number
                format: float
                description: Movie rating
              runtime:
                type: number
                format: float
                description: Runtime of the movie in minutes
              votes:
                type: integer
                description: Number of votes the movie received
              revenue:
                type: number
                format: float
                description: Revenue generated by the movie
              metascore:
                type: integer
                description: Metascore of the movie
              created_at:
                type: string
                format: date-time
                description: Timestamp when the movie record was created
      400:
        description: Invalid input
      404:
        description: No records found
      500:
        description: Internal server error
    """

    payload = request.get_json()

    result = svc_in_search(payload)
    return ResponseModel(status=result["status"], data=result["data"])
